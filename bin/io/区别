NIO：

IO是面向流  而NIO则是面向缓冲区
IO流是阻塞的  NIO则是不阻塞的
NIO有选择器  IO没有
选择器用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个的线程可以监听多个数据通道。

读数据：从通道进行数据读取，创建一个缓冲区，然后请求通道读取数据
写数据：创建一个缓冲区，填充数据，并要求通道写入数据

NIO的核心组件：Channels Buffers Selectors

Selector允许单线程处理多个 Channel.由于有选择器(Selectors)就会在通量比较低的时候使用起来就比较方便.

NIO由于其读写是面向缓冲区的，所以非阻塞的读写起来就很快，也不需要等待其他读写命令的实现.
而IO由于是阻塞的，需要等待读写操作完成才能进行下一步操作.

如果在处理少量链接但是传输非常高的带宽的文件时，用典型的IO流可能比较适合，而非使用NIO.

Channel:Java NIO的通道类似流，但又有些不同：既可以从通道中读取数据，又可以写数据到通道。
但流的读写通常是单向的。通道可以异步地读写。通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。
正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。
FileChannel：从文件中读写数据。
DatagramChannel：能通过UDP读写网络中的数据。
SocketChannel：能通过TCP读写网络中的数据。
ServerSocketChannel：可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。